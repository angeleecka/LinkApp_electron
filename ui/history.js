// =============================================================================
// UI/HISTORY.JS ‚Äî –ö–æ—Ä–∑–∏–Ω–∞ —É–¥–∞–ª—ë–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (–∫–Ω–æ–ø–æ–∫ –∏ —Å–µ–∫—Ü–∏–π)
// =============================================================================
// –ß—Ç–æ –∑–¥–µ—Å—å:
// - –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ (openHistoryModal)
// - –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Å–ø–∏—Å–∫–∞ —É–¥–∞–ª—ë–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (renderHistoryList)
// - –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ (restoreItem)
// - –£–¥–∞–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –Ω–∞–≤—Å–µ–≥–¥–∞ (deleteFromHistory)
// - –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏ (clearHistory)
// =============================================================================

import { eventBus } from "../core/event-bus.js";
import { storage } from "../core/storage.js";
import { openModal } from "./modal-service.js"; // NEW

// =============================================================================
// –û–¢–ö–†–´–¢–ò–ï –ú–û–î–ê–õ–ö–ò –ò–°–¢–û–†–ò–ò –£–î–ê–õ–ï–ù–ò–ô
// =============================================================================
/**
 * –û—Ç–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª–∫—É —Å –∏—Å—Ç–æ—Ä–∏–µ–π —É–¥–∞–ª—ë–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
 */
export function openHistoryModal() {
  const data = storage.get();
  const history = data.deletedItemsHistory || [];

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª–∫–∏ —Å –¥–∞–Ω–Ω—ã–º–∏ –∏—Å—Ç–æ—Ä–∏–∏
  eventBus.emit("modal:history:open", { history });
}

// =============================================================================
// –†–ï–ù–î–ï–†–ò–ù–ì –°–ü–ò–°–ö–ê –£–î–ê–õ–Å–ù–ù–´–• –≠–õ–ï–ú–ï–ù–¢–û–í
// =============================================================================
/**
 * –û—Ç—Ä–µ–Ω–¥–µ—Ä–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É–¥–∞–ª—ë–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤–Ω—É—Ç—Ä–∏ –º–æ–¥–∞–ª–∫–∏
 * @param {HTMLElement} container - DOM-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å–ø–∏—Å–∫–∞
 */
export function renderHistoryList(container) {
  const data = storage.get();
  const history = data.deletedItemsHistory || [];

  // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
  container.innerHTML = "";

  // –ï—Å–ª–∏ –∏—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞—è ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
  if (history.length === 0) {
    container.innerHTML =
      '<p style="color: #666;">Deletion history is empty.</p>';
    return;
  }

  // –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –º–∞—Å—Å–∏–≤ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ —É–¥–∞–ª—ë–Ω–Ω—ã–µ ‚Äî —Å–≤–µ—Ä—Ö—É)
  const reversed = [...history].reverse();

  // –†–µ–Ω–¥–µ—Ä–∏–º –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏—Å—Ç–æ—Ä–∏–∏
  reversed.forEach((item, idx) => {
    // –í—ã—á–∏—Å–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –≤ –º–∞—Å—Å–∏–≤–µ (–¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π restore/delete)
    const originalIndex = history.length - 1 - idx;

    // –°–æ–∑–¥–∞—ë–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —ç–ª–µ–º–µ–Ω—Ç–∞
    const itemDiv = document.createElement("div");
    itemDiv.className = "history-item";

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —ç–ª–µ–º–µ–Ω—Ç–∞
    let content = "";

    if (item.type === "button") {
      // –£–¥–∞–ª—ë–Ω–Ω–∞—è –∫–Ω–æ–ø–∫–∞
      const path = `${item.pageName || "(unknown page)"} / ${
        item.sectionName || "(unknown section)"
      }`;

      content = `
        <p><strong>Button:</strong> ${item.name || "Unnamed"}</p>
        <p><strong>Link:</strong> <a href="${
          item.link || "#"
        }" target="_blank" rel="noopener">${item.link || "No link"}</a></p>
        <p class="origin-path"><small>From: ${path}</small></p>   <!-- NEW -->
      `;
    } else if (item.type === "section") {
      const buttonsCount = Array.isArray(item.buttons)
        ? item.buttons.length
        : 0;
      const label = item.sectionName || item.name || "Unnamed"; // ‚Üê –¥–æ–±–∞–≤–∏–ª–∏ fallback –Ω–∞ sectionName
      const page = item.pageName || "(unknown page)";
      content = `
        <p><strong>Section:</strong> ${label}</p>
        <p>(Contains ${buttonsCount} button${buttonsCount !== 1 ? "s" : ""})</p>
        <p class="origin-path"><small>From: ${page}</small></p> 
      `;
    }

    // –î–∞—Ç–∞ —É–¥–∞–ª–µ–Ω–∏—è
    const date = item.deletedAt
      ? new Date(item.deletedAt).toLocaleString()
      : "Unknown";
    content += `<p class="deleted-at">Deleted: ${date}</p>`;

    itemDiv.innerHTML = content;

    // ===== –ö–ù–û–ü–ö–ê "RESTORE" (–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å) =====
    const restoreBtn = document.createElement("button");
    restoreBtn.textContent = "Restore";
    restoreBtn.className = "restore-button";
    restoreBtn.title = "Restore this item";
    restoreBtn.addEventListener("click", () => {
      restoreItem(originalIndex);
    });

    // ===== –ò–ö–û–ù–ö–ê "üóëÔ∏è" (—É–¥–∞–ª–∏—Ç—å –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –Ω–∞–≤—Å–µ–≥–¥–∞) =====
    const deleteIcon = document.createElement("span");
    deleteIcon.textContent = "üóëÔ∏è";
    deleteIcon.className = "delete-from-history-icon";
    deleteIcon.title = "Delete this item from history permanently";
    deleteIcon.addEventListener("click", () => {
      eventBus.emit("modal:confirm:open", {
        title: "Delete from History?",
        message: "Delete this item from history permanently?",
        confirmText: "Delete",
        cancelText: "Cancel",
        onConfirm: () => deleteFromHistory(originalIndex),
      });
    });

    // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–Ω–æ–ø–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π
    const actionsDiv = document.createElement("div");
    actionsDiv.className = "history-item-actions";
    actionsDiv.appendChild(restoreBtn);
    actionsDiv.appendChild(deleteIcon);

    itemDiv.appendChild(actionsDiv);
    container.appendChild(itemDiv);
  });

  console.log(`[history] Rendered ${history.length} items`);
}

// =============================================================================
// –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –≠–õ–ï–ú–ï–ù–¢–ê –ò–ó –ò–°–¢–û–†–ò–ò
// =============================================================================
/**
 * –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É–¥–∞–ª—ë–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç (–∫–Ω–æ–ø–∫—É –∏–ª–∏ —Å–µ–∫—Ü–∏—é)
 * @param {number} historyIndex - –ò–Ω–¥–µ–∫—Å —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –º–∞—Å—Å–∏–≤–µ deletedItemsHistory
 */
export function restoreItem(historyIndex) {
  const data = storage.get();
  const history = data.deletedItemsHistory || [];

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–¥–µ–∫—Å–∞
  if (historyIndex < 0 || historyIndex >= history.length) {
    console.error("[history] Invalid restore index:", historyIndex);
    eventBus.emit("ui:toast", {
      type: "error",
      message: "Item not found in history!",
    });
    return;
  }

  const item = history[historyIndex];

  // ====== –•–ï–õ–ü–ï–†–´ (–ª–æ–∫–∞–ª—å–Ω—ã–µ) ======
  const findPageIndexById = (id) =>
    id ? storage.get().pages.findIndex((p) => p.id === id) : -1;

  const ensureRestoredPageIndex = () => {
    let idx = storage
      .get()
      .pages.findIndex((p) => (p.name || "").toLowerCase() === "restored");
    if (idx !== -1) return idx;
    storage.update((d) => {
      d.pages.push({
        id: `page-restored-${Date.now()}`,
        name: "Restored",
        sections: {},
      });
    });
    return storage.get().pages.length - 1;
  };

  const ensureSectionOnPage = (pageIndex, titleHint = "Restored") => {
    let createdId = null;
    storage.update((d) => {
      const page = d.pages[pageIndex];
      if (!page.sections) page.sections = {};
      // –ò—â–µ–º —Å–µ–∫—Ü–∏—é —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º, –Ω–∞—á–∏–Ω–∞—é—â–∏–º—Å—è –Ω–∞ "Restored"
      const existingId = Object.keys(page.sections).find((id) =>
        (page.sections[id]?.text || "").toLowerCase().startsWith("restored")
      );
      if (existingId) {
        createdId = existingId;
        return;
      }
      createdId = `section-restored-${Date.now()}`;
      page.sections[createdId] = { text: titleHint, buttons: [] };
    });
    return createdId;
  };

  const closeHistoryModal = () => eventBus.emit("modal:history:close");

  // ====== –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –ö–ù–û–ü–ö–ò ======
  if (item.type === "button") {
    const pageIdx = findPageIndexById(item.pageId);
    const hasPage = pageIdx !== -1;
    const curData = storage.get();
    const hasSection =
      hasPage &&
      curData.pages[pageIdx].sections &&
      curData.pages[pageIdx].sections[item.sectionId];

    // (A) –¢–∏—Ö–∏–π –≤–æ–∑–≤—Ä–∞—Ç "–∫–∞–∫ –±—ã–ª–æ"
    if (hasPage && hasSection) {
      let restoredBtn = null;
      storage.update((d) => {
        const page = d.pages[pageIdx];
        const section = page.sections[item.sectionId];
        const btn = {
          id: `button-${Date.now()}-${Math.floor(Math.random() * 1e4)}`,
          text: item.name || "Restored button",
          href: item.link || "",
        };
        restoredBtn = btn; // –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –¥–ª—è Undo
        const at = Number.isInteger(item.buttonIndex)
          ? Math.min(Math.max(item.buttonIndex, 0), section.buttons.length)
          : section.buttons.length;
        section.buttons.splice(at, 0, btn);
        d.deletedItemsHistory.splice(historyIndex, 1);
      });

      closeHistoryModal();

      eventBus.emit("ui:toast", {
        type: "success",
        message: `Button "${item.name || ""}" ‚Üí ${item.pageName || "Page"} / ${
          item.sectionName || "Section"
        }`,
        action: {
          // ‚Üê –í–ù–ï message, –æ—Ç–¥–µ–ª—å–Ω—ã–º –ø–æ–ª–µ–º!
          label: "Undo",
          event: "history:undo",
          payload: {
            type: "button", // ‚Üê —ç—Ç–æ –∫–Ω–æ–ø–∫–∞
            pageIdx,
            sectionId: item.sectionId,
            buttonId: restoredBtn.id, // ‚Üê ID —Ç–æ–ª—å–∫–æ —á—Ç–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∫–Ω–æ–ø–∫–∏
            historyItem: JSON.parse(JSON.stringify(item)),
          },
        },
      });

      return;
    }

    // (B) –ü—Ä–µ–¥–∫–æ–≤ –Ω–µ—Ç ‚Äî —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Restored
    const modal = openModal({
      title: "Restore Button",
      bodyHTML: `
        <p>Parent container not found. What would you like to do?</p>
        <div class="modal-actions">
          <button class="btn" id="btnRecreate">Recreate missing parent(s)</button>
          <button class="btn" id="btnToRestored">To ‚ÄúRestored‚Äù</button>
          <button class="btn cancel" id="btnCancel">Cancel</button>
        </div>
      `,
    });

    // (A) Recreate missing page/section –ø–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º
    document.getElementById("btnRecreate")?.addEventListener("click", () => {
      // 1) —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º
      let targetPageIndex = findPageIndexById(item.pageId);
      if (targetPageIndex === -1) {
        storage.update((d) => {
          d.pages.push({
            id: item.pageId || `page-${Date.now()}`,
            name: item.pageName || "Restored",
            sections: {},
          });
        });
        targetPageIndex = storage.get().pages.length - 1;
      }

      // 2) —Å–µ–∫—Ü–∏—è –Ω–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
      const ensureSection = () => {
        const d = storage.get();
        const page = d.pages[targetPageIndex];
        if (!page.sections) page.sections = {};
        let sid = item.sectionId || `section-${Date.now()}`;
        if (page.sections[sid])
          sid = `${sid}-restored-${Math.floor(Math.random() * 1e3)}`;
        storage.update((dd) => {
          const p = dd.pages[targetPageIndex];
          if (!p.sections[sid]) {
            p.sections[sid] = {
              text: item.sectionName || item.name || "Restored",
              buttons: [],
            };
          }
        });
        return sid;
      };
      const targetSectionId = ensureSection();

      // 3) –≤—Å—Ç–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É + —É–¥–∞–ª—è–µ–º –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
      let restoredBtn = null; // ‚Üê NEW
      storage.update((d) => {
        const page = d.pages[targetPageIndex];
        const section = page.sections[targetSectionId];
        const btn = {
          id: `button-${Date.now()}-${Math.floor(Math.random() * 1e4)}`,
          text: item.name || "Restored button",
          href: item.link || "",
        };
        restoredBtn = btn; // ‚Üê NEW
        const at = Number.isInteger(item.buttonIndex)
          ? Math.min(Math.max(item.buttonIndex, 0), section.buttons.length)
          : section.buttons.length;
        section.buttons.splice(at, 0, btn);
        d.deletedItemsHistory.splice(historyIndex, 1);
      });

      modal?.close?.();
      closeHistoryModal();

      eventBus.emit("ui:toast", {
        type: "success",
        message: `Button "${item.name || ""}" restored (recreated parents)`,
        action: {
          // ‚Üê NEW ‚Äî Undo
          label: "Undo",
          event: "history:undo",
          payload: {
            type: "button",
            pageIdx: targetPageIndex,
            sectionId: targetSectionId,
            buttonId: restoredBtn.id,
            historyItem: JSON.parse(JSON.stringify(item)),
          },
        },
      });
    });

    // (B) To ‚ÄúRestored‚Äù ‚Äî –æ—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –±—ã–ª–æ —É —Ç–µ–±—è
    document.getElementById("btnToRestored")?.addEventListener("click", () => {
      const targetPageIdx = ensureRestoredPageIndex();
      const targetSectionId = ensureSectionOnPage(targetPageIdx, "Restored");

      let restoredBtn = null; // NEW
      storage.update((d) => {
        const page = d.pages[targetPageIdx];
        const section = page.sections[targetSectionId];
        const btn = {
          id: `button-${Date.now()}-${Math.floor(Math.random() * 1e4)}`,
          text: item.name || "Restored button",
          href: item.link || "",
        };
        restoredBtn = btn; // NEW
        section.buttons.push(btn);
        d.deletedItemsHistory.splice(historyIndex, 1);
      });

      modal?.close?.();
      closeHistoryModal();

      eventBus.emit("ui:toast", {
        type: "success",
        message: `Button "${item.name || ""}" restored to ‚ÄúRestored‚Äù`,
        action: {
          // NEW ‚Äî Undo
          label: "Undo",
          event: "history:undo",
          payload: {
            type: "button",
            pageIdx: targetPageIdx,
            sectionId: targetSectionId,
            buttonId: restoredBtn.id,
            historyItem: JSON.parse(JSON.stringify(item)),
          },
        },
      });
    });

    document
      .getElementById("btnCancel")
      ?.addEventListener("click", () => modal?.close?.());

    return;
  }

  // ====== –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –°–ï–ö–¶–ò–ò ======
  if (item.type === "section") {
    const pageIdx = findPageIndexById(item.pageId);
    const hasPage = pageIdx !== -1;

    // (A) –¢–∏—Ö–∏–π –≤–æ–∑–≤—Ä–∞—Ç "–∫–∞–∫ –±—ã–ª–æ"
    if (hasPage) {
      let createdSectionId = null; // ‚Üê NEW
      storage.update((d) => {
        const page = d.pages[pageIdx];
        if (!page.sections) page.sections = {};

        let newId =
          item.sectionId && !page.sections[item.sectionId]
            ? item.sectionId
            : `section-${Date.now()}`;
        while (page.sections[newId])
          newId = `${newId}-${Math.floor(Math.random() * 1e3)}`;

        const buttons = (item.buttons || []).map((b) => ({
          id:
            b?.id || `button-${Date.now()}-${Math.floor(Math.random() * 1e4)}`,
          text: b?.text || b?.name || "Restored button",
          href: b?.href || b?.link || "",
        }));

        page.sections[newId] = {
          text: item.sectionName || item.name || "Restored section",
          buttons,
        };
        createdSectionId = newId; // ‚Üê NEW
        d.deletedItemsHistory.splice(historyIndex, 1);
      });

      closeHistoryModal();

      eventBus.emit("ui:toast", {
        type: "success",
        message: `Section "${
          item.sectionName || item.name || ""
        }" restored to page: ${item.pageName || "Page"}`,
        action: {
          // ‚Üê NEW ‚Äî Undo
          label: "Undo",
          event: "history:undo",
          payload: {
            type: "section",
            pageIdx,
            sectionNewId: createdSectionId,
            historyItem: JSON.parse(JSON.stringify(item)),
          },
        },
      });
      return;
    }

    // (B) –°—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–µ—Ç ‚Äî —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Restored
    const modal = openModal({
      title: "Restore Section",
      bodyHTML: `
        <p>Parent page not found. What would you like to do?</p>
        <div class="modal-actions">
          <button class="btn" id="secRecreate">Recreate missing page</button>
          <button class="btn" id="secToRestored">To ‚ÄúRestored‚Äù page</button>
          <button class="btn cancel" id="secCancel">Cancel</button>
        </div>
      `,
    });

    // (A) Recreate missing page –∏ –≤–µ—Ä–Ω—É—Ç—å —Å–µ–∫—Ü–∏—é —Ç—É–¥–∞
    document.getElementById("secRecreate")?.addEventListener("click", () => {
      // 1) —Å–æ–∑–¥–∞—ë–º (–∏–ª–∏ –±–µ—Ä—ë–º) —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º
      let targetPageIndex = findPageIndexById(item.pageId);
      if (targetPageIndex === -1) {
        storage.update((d) => {
          d.pages.push({
            id: item.pageId || `page-${Date.now()}`,
            name: item.pageName || item.name || "Restored",
            sections: {},
          });
        });
        targetPageIndex = storage.get().pages.length - 1;
      }

      // 2) —Å–æ–∑–¥–∞—ë–º —Å–µ–∫—Ü–∏—é (–ø—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–π sectionId/sectionName)
      let createdSectionId = null; // ‚Üê NEW
      storage.update((d) => {
        const page = d.pages[targetPageIndex];
        if (!page.sections) page.sections = {};
        let newId = item.sectionId || `section-${Date.now()}`;
        if (page.sections[newId]) {
          newId = `${newId}-restored-${Math.floor(Math.random() * 1e3)}`;
        }

        const buttons = (item.buttons || []).map((b) => ({
          id:
            b?.id || `button-${Date.now()}-${Math.floor(Math.random() * 1e4)}`,
          text: b?.text || b?.name || "Restored button",
          href: b?.href || b?.link || "",
        }));

        page.sections[newId] = {
          text: item.sectionName || item.name || "Restored section",
          buttons,
        };
        createdSectionId = newId; // ‚Üê NEW
        d.deletedItemsHistory.splice(historyIndex, 1);
      });

      modal?.close?.();
      closeHistoryModal();

      eventBus.emit("ui:toast", {
        type: "success",
        message: `Section "${
          item.sectionName || item.name || ""
        }" restored to page: ${item.pageName || "Page"}`,
        action: {
          // ‚Üê –∫–Ω–æ–ø–∫–∞ Undo
          label: "Undo",
          event: "history:undo",
          payload: {
            type: "section",
            pageIdx: targetPageIndex, // ‚Üê –±—ã–ª pageIdx, –Ω—É–∂–Ω–æ targetPageIndex
            sectionNewId: createdSectionId,
            historyItem: JSON.parse(JSON.stringify(item)),
          },
        },
      });
    });

    // (B) To ‚ÄúRestored‚Äù page ‚Äî –æ—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –±—ã–ª–æ
    document.getElementById("secToRestored")?.addEventListener("click", () => {
      const targetPageIdx = ensureRestoredPageIndex();

      let createdSectionId = null; // NEW
      storage.update((d) => {
        const page = d.pages[targetPageIdx];
        if (!page.sections) page.sections = {};
        let newId = `section-${Date.now()}`;
        while (page.sections[newId])
          newId = `${newId}-${Math.floor(Math.random() * 1e3)}`;

        const buttons = (item.buttons || []).map((b) => ({
          id:
            b?.id || `button-${Date.now()}-${Math.floor(Math.random() * 1e4)}`,
          text: b?.text || b?.name || "Restored button",
          href: b?.href || b?.link || "",
        }));

        page.sections[newId] = {
          text: item.sectionName || item.name || "Restored section",
          buttons,
        };
        createdSectionId = newId; // NEW
        d.deletedItemsHistory.splice(historyIndex, 1);
      });

      modal?.close?.();
      closeHistoryModal();

      eventBus.emit("ui:toast", {
        type: "success",
        message: `Section "${
          item.sectionName || item.name || ""
        }" restored to ‚ÄúRestored‚Äù`,
        action: {
          // NEW ‚Äî Undo
          label: "Undo",
          event: "history:undo",
          payload: {
            type: "section",
            pageIdx: targetPageIdx,
            sectionNewId: createdSectionId,
            historyItem: JSON.parse(JSON.stringify(item)),
          },
        },
      });
    });

    document
      .getElementById("secCancel")
      ?.addEventListener("click", () => modal?.close?.());
  }
}

// =============================================================================
// –£–î–ê–õ–ï–ù–ò–ï –≠–õ–ï–ú–ï–ù–¢–ê –ò–ó –ò–°–¢–û–†–ò–ò –ù–ê–í–°–ï–ì–î–ê
// =============================================================================
/**
 * –£–¥–∞–ª–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –Ω–∞–≤—Å–µ–≥–¥–∞ (–±–µ–∑ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è)
 * @param {number} historyIndex - –ò–Ω–¥–µ–∫—Å —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –º–∞—Å—Å–∏–≤–µ deletedItemsHistory
 */
export function deleteFromHistory(historyIndex) {
  const data = storage.get();
  const history = data.deletedItemsHistory || [];

  // –ü—Ä–æ–≤–µ—Ä–∫–∞: –≤–∞–ª–∏–¥–Ω—ã–π –ª–∏ –∏–Ω–¥–µ–∫—Å?
  if (historyIndex < 0 || historyIndex >= history.length) {
    console.error("[history] Invalid delete index:", historyIndex);
    return;
  }

  // –£–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
  storage.update((data) => {
    data.deletedItemsHistory.splice(historyIndex, 1);
  });

  // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≤ –º–æ–¥–∞–ª–∫–µ (–µ—Å–ª–∏ –æ–Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∞)
  eventBus.emit("history:item-deleted", { historyIndex });

  console.log(`[history] Item deleted from history at index ${historyIndex}`);
}

// =============================================================================
// –û–ß–ò–°–¢–ö–ê –í–°–ï–ô –ò–°–¢–û–†–ò–ò
// =============================================================================
/**
 * –û—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é —É–¥–∞–ª–µ–Ω–∏–π (–ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è)
 */
export function clearHistory() {
  // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –º–æ–¥–∞–ª–∫—É
  eventBus.emit("modal:confirm:open", {
    title: "Clear History?",
    message:
      "Are you sure you want to clear the deletion history? This action cannot be undone.",
    onConfirm: () => {
      // –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
      storage.update((data) => {
        data.deletedItemsHistory = [];
      });

      // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É –∏—Å—Ç–æ—Ä–∏–∏
      eventBus.emit("modal:history:close");

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      eventBus.emit("ui:toast", {
        type: "info",
        message: "History cleared",
      });

      console.log("[history] History cleared");
    },
  });
}

eventBus.on(
  "history:undo",
  ({ type, pageIdx, sectionId, buttonId, sectionNewId, historyItem }) => {
    const d0 = storage.get();
    if (!d0 || !Array.isArray(d0.pages)) return;

    storage.update((d) => {
      const pages = d.pages;

      if (type === "button") {
        const page = pages[pageIdx];
        const section = page?.sections?.[sectionId];
        if (!section) return;
        const idx = section.buttons.findIndex((b) => b.id === buttonId);
        if (idx !== -1) section.buttons.splice(idx, 1);
        // –≤–µ—Ä–Ω—É—Ç—å –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é (–≤ –∫–æ–Ω–µ—Ü)
        d.deletedItemsHistory.push(historyItem);
      }

      if (type === "section") {
        const page = pages[pageIdx];
        if (page?.sections?.[sectionNewId]) {
          delete page.sections[sectionNewId];
        }
        d.deletedItemsHistory.push(historyItem);
      }
    });

    eventBus.emit("ui:toast", { type: "info", message: "Undone" });
  }
);

// =============================================================================
// –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ú–û–î–£–õ–Ø
// =============================================================================
/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏—Å—Ç–æ—Ä–∏–µ–π
 */
export function initHistory() {
  // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –æ—Ç–∫—Ä—ã—Ç–∏—è –∏—Å—Ç–æ—Ä–∏–∏ (–∫–Ω–æ–ø–∫–∞ "History" –≤ —à–∞–ø–∫–µ)
  eventBus.on("history:open", openHistoryModal);

  // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ (–∫–Ω–æ–ø–∫–∞ "Clear History" –≤ –º–æ–¥–∞–ª–∫–µ)
  eventBus.on("history:clear", clearHistory);

  console.log("‚úÖ History module initialized");
}
